{"version":3,"sources":["Card.jsx","Deck.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","randomAngle","Math","random","randomX","randomY","randomTransform","className","src","this","imageURL","alt","name","style","transform","React","Component","API_BASE_URL","Deck","state","cards","deckID","handleClick","bind","a","axios","get","response","data","deck_id","setState","event","cardURL","cardDeck","success","Error","newCard","length","id","code","image","value","suit","alert","onClick","map","card","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wVA2BeA,E,kDAvBb,WAAYC,GAAQ,IAAD,sBACjB,cAAMA,GAGN,IAAIC,EAA8B,GAAhBC,KAAKC,SAAgB,GACnCC,EAA0B,GAAhBF,KAAKC,SAAgB,GAC/BE,EAA0B,GAAhBH,KAAKC,SAAgB,GANlB,OAOjB,EAAKG,gBAAL,oBAAoCF,EAApC,eAAkDC,EAAlD,sBAAuEJ,EAAvE,QAPiB,E,0CAUnB,WACE,OACE,qBAAKM,UAAU,OAAf,SACE,qBACEC,IAAKC,KAAKT,MAAMU,SAChBC,IAAKF,KAAKT,MAAMY,KAChBC,MAAO,CAAEC,UAAWL,KAAKH,yB,GAjBhBS,IAAMC,W,iBCEnBC,EAAe,uCAEfC,E,kDACJ,WAAYlB,GAAQ,IAAD,8BACjB,cAAMA,IACDmB,MAAQ,CAAEC,MAAO,GAAIC,OAAQ,IAClC,EAAKC,YAAc,EAAKA,YAAYC,KAAjB,gBAHF,E,4FAMnB,8BAAAC,EAAA,6DACqBP,EAAe,cADpC,SAEyBQ,IAAMC,IADVT,mDADrB,OAEQU,EAFR,OAGQN,EAASM,EAASC,KAAKC,QAE7BpB,KAAKqB,SAAS,CAAET,WALlB,gD,sHAQA,WAAkBU,GAAlB,mBAAAP,EAAA,sEAGUQ,EAHV,UAGuBf,GAHvB,OAGsCR,KAAKU,MAAME,OAHjD,2BAI2BI,IAAMC,IAAIM,GAJrC,WAIUC,EAJV,QAKkBL,KAAKM,QALvB,sBAMY,IAAIC,MAAM,sBANtB,OASUC,EAAUH,EAASL,KAAKR,MAAMa,EAASL,KAAKR,MAAMiB,OAAS,GAEjE5B,KAAKqB,SAAS,CACZV,MAAM,GAAD,mBACAX,KAAKU,MAAMC,OADX,CAEH,CACEkB,GAAIF,EAAQG,KACZC,MAAOJ,EAAQI,MACf5B,KAAK,GAAD,OAAKwB,EAAQK,MAAb,eAAyBL,EAAQM,WAjB/C,kDAsBIC,MAAM,EAAD,IAtBT,0D,2EA0BA,WACE,OACE,sBAAKpC,UAAU,OAAf,UACE,oBAAIA,UAAU,cAAd,qCACA,oBAAIA,UAAU,uBAAd,mDAGA,wBAAQA,UAAU,eAAeqC,QAASnC,KAAKa,YAA/C,wBAGA,qBAAKf,UAAU,uBAAf,SACGE,KAAKU,MAAMC,MAAMyB,KAAI,SAACC,GACrB,OACE,cAAC,EAAD,CAAoBpC,SAAUoC,EAAKN,MAAO5B,KAAMkC,EAAKlC,MAA1CkC,EAAKR,gB,GAtDXvB,IAAMC,WA+DVE,IC3DA6B,MARf,WACE,OACE,qBAAKxC,UAAU,MAAf,SACE,cAAC,EAAD,OCMSyC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.71975f5d.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Card.css';\r\n\r\nclass Card extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    // Give the card a random angle and position offset\r\n    let randomAngle = Math.random() * 90 - 45;\r\n    let randomX = Math.random() * 40 - 20;\r\n    let randomY = Math.random() * 40 - 20;\r\n    this.randomTransform = `translate(${randomX}px, ${randomY}px) rotate(${randomAngle}deg)`;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className='Card'>\r\n        <img\r\n          src={this.props.imageURL}\r\n          alt={this.props.name}\r\n          style={{ transform: this.randomTransform }}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport './Deck.css';\r\nimport Card from './Card';\r\nimport axios from 'axios';\r\n\r\nconst API_BASE_URL = 'https://deckofcardsapi.com/api/deck/';\r\n\r\nclass Deck extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { cards: [], deckID: '' };\r\n    this.handleClick = this.handleClick.bind(this);\r\n  }\r\n\r\n  async componentDidMount() {\r\n    const newDeckURL = API_BASE_URL + 'new/shuffle';\r\n    const response = await axios.get(newDeckURL);\r\n    const deckID = response.data.deck_id; // deck.data\r\n\r\n    this.setState({ deckID });\r\n  }\r\n\r\n  async handleClick(event) {\r\n    // Draw new card if there's any remaining\r\n    try {\r\n      const cardURL = `${API_BASE_URL}${this.state.deckID}/draw/?count=1`;\r\n      const cardDeck = await axios.get(cardURL);\r\n      if (!cardDeck.data.success) {\r\n        throw new Error('No cards remaining');\r\n      }\r\n\r\n      const newCard = cardDeck.data.cards[cardDeck.data.cards.length - 1];\r\n\r\n      this.setState({\r\n        cards: [\r\n          ...this.state.cards,\r\n          {\r\n            id: newCard.code,\r\n            image: newCard.image,\r\n            name: `${newCard.value} of ${newCard.suit}`,\r\n          },\r\n        ],\r\n      });\r\n    } catch (error) {\r\n      alert(error);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className='Deck'>\r\n        <h1 className='Deck__title'>♦Card Dealer♦</h1>\r\n        <h2 className='Deck__title subtitle'>\r\n          A little API exercise made with React\r\n        </h2>\r\n        <button className='Deck__button' onClick={this.handleClick}>\r\n          Deal Card!\r\n        </button>\r\n        <div className='Deck__card-container'>\r\n          {this.state.cards.map((card) => {\r\n            return (\r\n              <Card key={card.id} imageURL={card.image} name={card.name} />\r\n            );\r\n          })}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Deck;\r\n","import './App.css';\nimport Deck from './Deck';\n\nfunction App() {\n  return (\n    <div className='App'>\n      <Deck />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}